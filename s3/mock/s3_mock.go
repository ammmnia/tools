// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ammmnia/tools/s3 (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -destination mock/s3_mock.go github.com/ammmnia/tools/s3 Interface
//

// Package mock_s3 is a generated GoMock package.
package mock_s3

import (
	context "context"
	reflect "reflect"
	time "time"

	s3 "github.com/ammmnia/tools/s3"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AbortMultipartUpload mocks base method.
func (m *MockInterface) AbortMultipartUpload(ctx context.Context, uploadID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortMultipartUpload", ctx, uploadID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload.
func (mr *MockInterfaceMockRecorder) AbortMultipartUpload(ctx, uploadID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockInterface)(nil).AbortMultipartUpload), ctx, uploadID, name)
}

// AccessURL mocks base method.
func (m *MockInterface) AccessURL(ctx context.Context, name string, expire time.Duration, opt *s3.AccessURLOption) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessURL", ctx, name, expire, opt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessURL indicates an expected call of AccessURL.
func (mr *MockInterfaceMockRecorder) AccessURL(ctx, name, expire, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessURL", reflect.TypeOf((*MockInterface)(nil).AccessURL), ctx, name, expire, opt)
}

// AuthSign mocks base method.
func (m *MockInterface) AuthSign(ctx context.Context, uploadID, name string, expire time.Duration, partNumbers []int) (*s3.AuthSignResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSign", ctx, uploadID, name, expire, partNumbers)
	ret0, _ := ret[0].(*s3.AuthSignResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthSign indicates an expected call of AuthSign.
func (mr *MockInterfaceMockRecorder) AuthSign(ctx, uploadID, name, expire, partNumbers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSign", reflect.TypeOf((*MockInterface)(nil).AuthSign), ctx, uploadID, name, expire, partNumbers)
}

// CompleteMultipartUpload mocks base method.
func (m *MockInterface) CompleteMultipartUpload(ctx context.Context, uploadID, name string, parts []s3.Part) (*s3.CompleteMultipartUploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", ctx, uploadID, name, parts)
	ret0, _ := ret[0].(*s3.CompleteMultipartUploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload.
func (mr *MockInterfaceMockRecorder) CompleteMultipartUpload(ctx, uploadID, name, parts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockInterface)(nil).CompleteMultipartUpload), ctx, uploadID, name, parts)
}

// CopyObject mocks base method.
func (m *MockInterface) CopyObject(ctx context.Context, src, dst string) (*s3.CopyObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyObject", ctx, src, dst)
	ret0, _ := ret[0].(*s3.CopyObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyObject indicates an expected call of CopyObject.
func (mr *MockInterfaceMockRecorder) CopyObject(ctx, src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObject", reflect.TypeOf((*MockInterface)(nil).CopyObject), ctx, src, dst)
}

// DeleteObject mocks base method.
func (m *MockInterface) DeleteObject(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockInterfaceMockRecorder) DeleteObject(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockInterface)(nil).DeleteObject), ctx, name)
}

// Engine mocks base method.
func (m *MockInterface) Engine() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Engine")
	ret0, _ := ret[0].(string)
	return ret0
}

// Engine indicates an expected call of Engine.
func (mr *MockInterfaceMockRecorder) Engine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Engine", reflect.TypeOf((*MockInterface)(nil).Engine))
}

// FormData mocks base method.
func (m *MockInterface) FormData(ctx context.Context, name string, size int64, contentType string, duration time.Duration) (*s3.FormData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormData", ctx, name, size, contentType, duration)
	ret0, _ := ret[0].(*s3.FormData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormData indicates an expected call of FormData.
func (mr *MockInterfaceMockRecorder) FormData(ctx, name, size, contentType, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormData", reflect.TypeOf((*MockInterface)(nil).FormData), ctx, name, size, contentType, duration)
}

// InitiateMultipartUpload mocks base method.
func (m *MockInterface) InitiateMultipartUpload(ctx context.Context, name string) (*s3.InitiateMultipartUploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateMultipartUpload", ctx, name)
	ret0, _ := ret[0].(*s3.InitiateMultipartUploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateMultipartUpload indicates an expected call of InitiateMultipartUpload.
func (mr *MockInterfaceMockRecorder) InitiateMultipartUpload(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateMultipartUpload", reflect.TypeOf((*MockInterface)(nil).InitiateMultipartUpload), ctx, name)
}

// IsNotFound mocks base method.
func (m *MockInterface) IsNotFound(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFound", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFound indicates an expected call of IsNotFound.
func (mr *MockInterfaceMockRecorder) IsNotFound(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFound", reflect.TypeOf((*MockInterface)(nil).IsNotFound), err)
}

// ListUploadedParts mocks base method.
func (m *MockInterface) ListUploadedParts(ctx context.Context, uploadID, name string, partNumberMarker, maxParts int) (*s3.ListUploadedPartsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUploadedParts", ctx, uploadID, name, partNumberMarker, maxParts)
	ret0, _ := ret[0].(*s3.ListUploadedPartsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadedParts indicates an expected call of ListUploadedParts.
func (mr *MockInterfaceMockRecorder) ListUploadedParts(ctx, uploadID, name, partNumberMarker, maxParts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadedParts", reflect.TypeOf((*MockInterface)(nil).ListUploadedParts), ctx, uploadID, name, partNumberMarker, maxParts)
}

// PartLimit mocks base method.
func (m *MockInterface) PartLimit() *s3.PartLimit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartLimit")
	ret0, _ := ret[0].(*s3.PartLimit)
	return ret0
}

// PartLimit indicates an expected call of PartLimit.
func (mr *MockInterfaceMockRecorder) PartLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartLimit", reflect.TypeOf((*MockInterface)(nil).PartLimit))
}

// PartSize mocks base method.
func (m *MockInterface) PartSize(ctx context.Context, size int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartSize", ctx, size)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartSize indicates an expected call of PartSize.
func (mr *MockInterfaceMockRecorder) PartSize(ctx, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartSize", reflect.TypeOf((*MockInterface)(nil).PartSize), ctx, size)
}

// PresignedPutObject mocks base method.
func (m *MockInterface) PresignedPutObject(ctx context.Context, name string, expire time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignedPutObject", ctx, name, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignedPutObject indicates an expected call of PresignedPutObject.
func (mr *MockInterfaceMockRecorder) PresignedPutObject(ctx, name, expire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignedPutObject", reflect.TypeOf((*MockInterface)(nil).PresignedPutObject), ctx, name, expire)
}

// StatObject mocks base method.
func (m *MockInterface) StatObject(ctx context.Context, name string) (*s3.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatObject", ctx, name)
	ret0, _ := ret[0].(*s3.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatObject indicates an expected call of StatObject.
func (mr *MockInterfaceMockRecorder) StatObject(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatObject", reflect.TypeOf((*MockInterface)(nil).StatObject), ctx, name)
}
